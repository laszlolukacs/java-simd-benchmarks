plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    modularity.inferModulePath = true
}

var incubatorArguments = ['--enable-preview', '--add-modules', 'jdk.incubator.vector']
var diagnosticsArguments = ['-XX:+UnlockDiagnosticVMOptions', '-XX:+PrintIntrinsics']
var compilerBlackholeArgument = '-Djmh.blackhole.mode=COMPILER'

tasks.withType(AbstractCompile) { options.compilerArgs += incubatorArguments }
tasks.withType(Test) { jvmArgs += incubatorArguments }

dependencies {
    implementation 'org.openjdk.jmh:jmh-core:1.34'
    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.34'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

application {
    // Define the main class for the application.
    mainClass = 'hu.laszlolukacs.vectorsimdbench.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task runtimeBenchmark(type: JavaExec) {
    dependsOn build
    javaLauncher = javaToolchains.launcherFor { languageVersion = JavaLanguageVersion.of(17) }
    jvmArgs += incubatorArguments
    jvmArgs += diagnosticsArguments
    jvmArgs += compilerBlackholeArgument
    group = 'Execution'
    description = 'Runs the benchmark code'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'hu.laszlolukacs.vectorsimdbench.App'
}
